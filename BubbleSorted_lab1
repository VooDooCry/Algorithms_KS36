package main

import (
	"fmt"
	"math/rand"
	"time"
)

func bubbleSort(arr []float64) (int, int) {
	n := len(arr)
	passes := 0
	swaps := 0
	for i := 0; i < n; i++ {
		swapped := false
		for j := 0; j < n-i-1; j++ {
			if arr[j] > arr[j+1] {
				arr[j], arr[j+1] = arr[j+1], arr[j]
				swaps++
				swapped = true
			}
		}
		passes++
		if !swapped {
			break
		}
	}
	return passes, swaps
}

func generateRandomArray(size int) []float64 {
	arr := make([]float64, size)
	for i := 0; i < size; i++ {
		arr[i] = rand.Float64()*2 - 1
	}
	return arr
}

func runSeries(size int, seriesLength int) []time.Duration {
	times := make([]time.Duration, 0, seriesLength)
	for i := 0; i < seriesLength; i++ {
		arr := generateRandomArray(size)

		startTime := time.Now()
		passes, swaps := bubbleSort(arr)
		elapsedTime := time.Since(startTime)

		fmt.Printf("Размер массива: %d,  Проходы: %d,  Обмены: %d,  Время: %v\n", size, passes, swaps, elapsedTime)

		times = append(times, elapsedTime)
	}
	fmt.Print("=========================================================================")
	return times
}

func main() {
	rand.Seed(time.Now().UnixNano())

	sizes := []int{1000, 2000, 4000, 8000, 16000, 32000, 64000, 128000}
	seriesLength := 20

	allTimes := make(map[int][]time.Duration)

	for _, size := range sizes {
		fmt.Printf("\n\nСерия для размерности массива: %d\n\n", size)
		times := runSeries(size, seriesLength)
		allTimes[size] = times
	}

	fmt.Println("\nСреднее время:")
	for size, times := range allTimes {
		var totalTime time.Duration
		for _, t := range times {
			totalTime += t
		}
		avgTime := totalTime / time.Duration(len(times))
		fmt.Printf("Размерность массива: %d, Среднее время выполнения: %v\n", size, avgTime)
	}
}
